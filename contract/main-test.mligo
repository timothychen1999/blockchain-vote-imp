#import "main.mligo" "Tally"


type param = Tally.Tally parameter_of

let test_vote =   let rsa  = {
    n = 710900066475127367606814535796883690210048254225028494332805212022097272084094172745969361876049452240743794169897511630353998603269335205707283507935717275064328293653796032889651529361519937361725967002545328323497345401433674994817969664337903677893359684922246489344335293263438146474874775027443782533598048715878803687435336879555773700403392825340158260222020016569114839244753309161300814594204470621606151798663066569155299880409799320219639817895164564977110108656198671528250147064578083845237623377250531490829811201343421006860758188154244008825138082314789544516875485208585265654842996127179053103178608014265242027891727293462618541588621268477400923088223209313958119183513184818063198487346284986037399034541811752512227715149083436073049819789216393595942670713669102988637309926554504249814495893082629944387338107227121080601853161199668167989498209639696716731804118126650946388635167911152529619060795974602715669725176142357558346690835690326897205305080651974902034926105100875289844258151404534823414186341031736274124248447428413646767615012486553037809933363178518603595548060455007030812436371691193113951934828572813694797169228446691775163027407591824498178798763356480273477202360362684919487579689027n;
    v = 65537n;
  } in
  let rsa_va = {
    n = 829877556720703678256341984443277037516625900134323352489753396851520181954448210488752894657256867854823406209792963382961661778250343429260501024785500403083914524620239870445309219693512658391073412330403240494955571515629478451905488880077434126877650905482967620977945392453909800701300677394117628271039180649090298500087229813936283418962951737494324842672871073827949255756055513393558815915627903197837900075360795523911923494611868567343225180044202011910045907830211888219266354415995249182957062061895013821206258949840275304424617890045946070804914886230896646928683014884248366042971952436337553767422014617871915416936572303064956196435503977382929592437873509964597260234996961143180577833689488653345100248591123952941947852855404829879528119604065720696879276942741313054667892404195122712228712423644029417502373784587904234173529415408377169772775175856254820623023748851935402652571839296848617339792970881616616863531099229708457124534019582486109692703798680566344132053590955807052741764991646193150997044776305828920565483141368807160357817024635596302971650240196212234057631948313735882396236846173271633463291081574701982856257858073838225960981840910964120259745402407731220535277358455268381598640712851n;
    v = 65537n;
  }
  in
  let used_ballots : nat big_set = Big_set.empty
  in
  let init_storage = {
    va_key  = rsa_va;
    rsa_key  = rsa;
    vote_state = 1n;
    vote_count = 0n;
    status = Tally.Tally.started;
    n = 68725602207521006437784575894675001n;
    r = 1000000007n;
    y = 65663240720027673982270279287901504n;
    admin = ("tz1burnburnburnburnburnburnburjAYjjX" : address);
    result = 0n;
    used_ballot = used_ballots;
  } in
  let origination_result = Test.Next.Originate.contract (contract_of Tally.Tally) init_storage 0tez in
  let () = 
    Test.Next.IO.log ("code size: " , origination_result.size)
  in
  let addr = origination_result.taddr 
  in
  let vote_param = 
  {
    v = 667817390428118755506063342732003256158551540390387500606615761099819710440071538169203081291798854619628040204396961528024823582830677124090317041633432209121519714913093990305962427319332290774601355295863452783272674181663176074514093760921867504093981997865689573838620133172804575209999606098714359875810783280083549412768102919741642729468323818545731708264394203329109226041322470763459996725917723932612593492954116457406729012923340696443486121385363685159479920277072285862165105206167482096886512696138899630658623549992906572631220584981998868968085331179432859373531593636188487127300995461179743465713538434156993202260037724712449329549610064141526209375034949407026018900656959550041159287198848805822130545501385367130543901355152887455505057489185182708110054625823843519497758764459524296060575377122141756347658225634497336012984375046288229481229742415545869709474539726577186409902558766846257665377457514974824289235595199702318391207511817877698048570172348351736683502245044273650759905726439790027257687744493587909137536245477861660262539855138687912406252893212901568703189004161486770439979056670173367581978697871045585672561444212179697652996780913196168682544592950423456329440281791444339315372622517n;
    mask = 19352189249109470238118334059585476617486083526302459455063702404507183648469789067312974893092637122642847907724074621007987303359766764777946919730431656237405990189161118400298224578522050371256494526103241515069832266877583587872461210307040038123341608302002868061392433316198428175950968798917576957909n;
    mask_inv =  294230640651617544575156097783503774432521200126048863972618458943540250651205168930166764343015147681022511347780093257541167598889501190803275169692030480305476393560768281670167577236322440189664785199253801251411707287236042349120572054826958280060133803776642408371170787244192211753498596070564309453554436293625046645595992206605428248971467548953792333741001230565093573132756857295226068545225817263110157891142428014799736405275360746061719534000365643214973701711457229573168854449520864581734031845588067102339947111125135145660566936682546668458959242929121668327833414523197482402375670807081371381652384538016566627720240494942733944662727534073186894383404363904279772882548983078722597439101943871322984723716212886709772003502740762556345414489500903708470170468309424890641756321424869636693602846901137959487594005716424082939237821466760649815867679721902239369141049201093372880524630513106765262943820259071991162921388293348040653543985947650460549294856239864607731732291915465631251441917122794324058733839464285879281518428200585843941141088055341878870339296284091255509991212466804458379737014103874200344920806492057752146741905461757551008263448338681410099576163334133738165606753986374863627328610452n;
    ballot_sig = 731846178387483454134325561377230999752425722677514383542007701249316202852620586263447807998116649085047439001124705495023327828941816910193521149184075567424686466374635505757142675996072742230659915938741186083748659402145204806420094177251840035800173108534363620740170488273776319195366490522741073170694563321384464921998189851745369570081104982627039356953548268261695786680007663788546004937786343621230218456437777450875040794176160819299629516998649865889151517182619605248891342586721023896686159324615005882818656072524555650502534452261102950761306128334443488436546476380788561477316831557398843179499860181394056108580076839648628746091212087401780278291719388559804309890919444206045879673241188792812027836259174159120768415524193507798807212344069423413282252116089530633634288010886292132587091496932005673171822450253419396882754076486708077082964993844984794074837176879646790763029458899296292613559041868003059588487273665404040222073580299644271362883723795648750740536664216882034150598299311566273040755500541494304348121041668507277109445716776051665583845743434932593996264485476556687811456049662103977199636593445395270413209348100725001231484015681557497477785297382794938373650109297379975715992165300n;
  }
  in
  // let ()= 
  //   assert (vote_param.mask_inv * vote_param.mask mod init_storage.rsa_key.n = 1n)
  // in
  let gas_cost = Test.Next.Typed_address.transfer_exn addr (Vote (vote_param)) 1mutez
  in let () = 
    Test.Next.IO.log ("gas cost: " , gas_cost)
  in
  let () =
    Test.Next.IO.log ("storage: " , Test.Next.Typed_address.get_storage addr)
  in
  let () = 
    Assert.assert ((Test.Next.Typed_address.get_storage addr).vote_count = 1n)
  in
  Assert.assert ((Test.Next.Typed_address.get_storage addr).vote_state <> 0n)
