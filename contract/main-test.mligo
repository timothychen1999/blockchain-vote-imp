#import "main.mligo" "Tally"

type param = Tally.Tally parameter_of

let test_vote =   let rsa  = {
    n = 781790335999490179138962382702358651041473679694090529219242759331427030465947735193458993967014340194036876812224099703419451954255819393068387422872670001932691159172279225147575219188639094895452022686016552346323697772304836141360079993269430705568357933918752031087985634066897440841780629385890186126283423741403354884610541836540647658045468978318215059466096169591525491236656593911077313200179243514867464609241967080284972150694867408629543180350932174802471403462939181437494166501303819420550707808286768943913464067028484541933878666092312181892735654186068334138528618299916983530126248934325663658261022539992382508134931484372373197196364799695026063862025139274520261475570518620854044202139352695697530775480550074347721518003060087316794798123829411944631322342374321472047526040590635793604334380588532605493683919492472094589489193946266370736207182572954856274065763073571653863278159286506369646549330065897365288620093978514763158692488214975988608041448668653245580753538377532177921061624861889317704302959769541531713273846007802217604026150880902146574479799260963123538294774897991438383802117566855640167712269844641231924469319477751824586767047035572650221994906323839715676650033752191141869818242837n;
    v = 65537n;
  } in
  let used_ballots : nat big_set = Big_set.empty
  in
  let init_storage = {
    va_key  = rsa;
    rsa_key  = rsa;
    vote_state = 1n;
    vote_count = 0n;
    status = Tally.Tally.started;
    n = 100n;
    r = 0n;
    y = 0n;
    admin = ("tz1burnburnburnburnburnburnburjAYjjX" : address);
    result = 0n;
    used_ballot = used_ballots;
  } in
  let {addr;code = _ ; size } = Test.originate (contract_of Tally.Tally) init_storage 0tez in
  let () = 
    Test.log ("code size: " , size)
  in

  let vote_param = 
  {
    v = 312178249186363028048521917537268973751966953364634718125487775725822698076774110158876997298249951951801475328870278511279800964295173440544383776198790064918689875443766699274376437398879631151442026310398942440502565652502837235133678995727198087670815579182260855459892244691226976454299177486033076592730573829493604444638025542763878941722494634290620752797715983558724698633090467088171394645284558657790194702912485680161554158352563655066513778705428768810174070361777633836377411508910430618527582088365398343120759685990805919490157544203348333978334311445950995606439567079410780956046310997607283753310643254073589901273347859972613091318708394467049332301800963222864674916690161541899309558335003309387388014001908398866751227269742707055032292496083176990569350896568510475202954490288085917610691084155092876254715471106445458623189546342016553525600659523972052401486058443027619455208712474585358829132418218752706591973118995404464443260622017648692405290117356143742898398206478991712555735048522546391870476200038468879022465612644972033519584575937750173609114253190938258089008837334240678928450118572915915362755198972641868404955176161008318647374422342985672505498535771276910133993826833279517170696827552n;
    mask = 171282738295504154423786547106842218181148485197417508780599118553941310121573669037752238992649811608875312645066923404280414424664310659303242125294717448829943103907989186501768682896496905164441005016572481010545482496215874634528656961964211208207443830467492046679019225487002453449128561037036417987074n;
    mask_inv =  437867487803618365265997322874025374276480658810278288471803743144423963314731343258962184323970485239993284768789168644975759388650266233388929986878340348636128644887073077522647759964278763660457349716397962413475611051212205650479763064771526487129636856062094790989258220483263677425325620207619652057892052328168509565089052120882025997364731713346611240262167733732667529476876858246849010245230924564519631371958278442749180572587231717278107908620115174326354098568113740237283498650542174324405577780434610039199985820992798417933528234407419337097763862649193485792681595219535612765070517387668436895621428373679474594577495308605811755613724556624114902389182612437583553187626808802580607915336879116816335817899696742579938949168261311876149624459524217038546851080334425849173695706621889857256662049208064284318041606244499845469315255968252880283280939674085550430417551050078087184173477047447900804124501737009645396209942777821596250935985726213035595227350494020467885577434163272407032275971694433258747642686466576951874416770621013011679373226773327259851142941885276206995899839865367679449795952885992658320499366910890896058561889505160245497040747450459501869590437551702192330890862735415011562598011644n;
    ballot_sig = 0n;
  }
  in
  // let ()= 
  //   assert (vote_param.mask_inv * vote_param.mask mod init_storage.rsa_key.n = 1n)
  // in
  let gas_cost = Test.transfer_exn addr (Vote (vote_param)) 1mutez
  in let () = 
    Test.log ("gas cost: " , gas_cost)
  in
  let () =
    Test.log ("storage: " , Test.get_storage addr)
  in
  let () = 
    assert ((Test.get_storage addr).vote_count = 1n)
  in
  assert ((Test.get_storage addr).vote_state <> 0n)
